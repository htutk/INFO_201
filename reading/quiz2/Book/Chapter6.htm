<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/programming-skills-for/9780135159071/ch01.xhtml"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="4550391"
  data-user-uuid="84c171ee-4dd7-4bd0-a2bc-254287669aaa"
  data-username="alexhtut"
  data-account-type="B2B"
  
  data-activated-trial-date=""


  data-archive="9780135159071"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="ch01.xhtml"
  data-epub-title="Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/programming-skills-for/9780135159071/ch01.xhtml" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="4550391" data-user-uuid="84c171ee-4dd7-4bd0-a2bc-254287669aaa" data-username="alexhtut" data-account-type="B2B" data-activated-trial-date="" data-archive="9780135159071" data-publishers="Addison-Wesley Professional" data-htmlfile-name="ch01.xhtml" data-epub-title="Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition" data-debug="0" data-testing="0" style="" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780135159071"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="Chapter6_files/nr-1118.js"></script><script async="" src="Chapter6_files/gtm.js"></script><script async="" src="Chapter6_files/analytics.js"></script><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o||n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({1:[function(e,n,t){function r(){}function o(e,n,t){return function(){return i(e,[c.now()].concat(u(arguments)),n?null:this,t),n?void 0:this}}var i=e("handle"),a=e(3),u=e(4),f=e("ee").get("tracer"),c=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,n){s[n]=o(d+n,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,o="function"==typeof n;return i(l+"tracer",[c.now(),e,t],r),function(){if(f.emit((o?"":"no-")+"fn-start",[c.now(),r,o],t),o)try{return n.apply(this,arguments)}catch(e){throw f.emit("fn-err",[arguments,this,e],t),e}finally{f.emit("fn-end",[c.now()],t)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=o(l+n)}),newrelic.noticeError=function(e,n){"string"==typeof e&&(e=new Error(e)),i("err",[e,c.now(),!1,n])}},{}],2:[function(e,n,t){function r(e,n){if(!o)return!1;if(e!==o)return!1;if(!n)return!0;if(!i)return!1;for(var t=i.split("."),r=n.split("."),a=0;a<r.length;a++)if(r[a]!==t[a])return!1;return!0}var o=null,i=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var u=navigator.userAgent,f=u.match(a);f&&u.indexOf("Chrome")===-1&&u.indexOf("Chromium")===-1&&(o="Safari",i=f[1])}n.exports={agent:o,version:i,match:r}},{}],3:[function(e,n,t){function r(e,n){var t=[],r="",i=0;for(r in e)o.call(e,r)&&(t[i]=n(r,e[r]),i+=1);return t}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],4:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(o<0?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=r},{}],5:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function o(e){function n(e){return e&&e instanceof r?e:e?f(e,u,i):i()}function t(t,r,o,i){if(!d.aborted||i){e&&e(t,r,o);for(var a=n(o),u=v(t),f=u.length,c=0;c<f;c++)u[c].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function l(e,n){h[e]=v(e).concat(n)}function m(e,n){var t=h[e];if(t)for(var r=0;r<t.length;r++)t[r]===n&&t.splice(r,1)}function v(e){return h[e]||[]}function g(e){return p[e]=p[e]||o(t)}function w(e,n){c(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var h={},y={},b={on:l,addEventListener:l,removeEventListener:m,emit:t,get:g,listeners:v,context:n,buffer:w,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",f=e("gos"),c=e(3),s={},p={},d=n.exports=o();d.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(o.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){o.buffer([e],r),o.emit(e,n,t)}var o=e("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!E++){var e=x.info=NREUM.info,n=l.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();c(y,function(n,t){e[n]||(e[n]=t)}),f("mark",["onload",a()+x.offset],null,"api");var t=l.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function o(){"complete"===l.readyState&&i()}function i(){f("mark",["domContent",a()+x.offset],null,"api")}function a(){return O.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-x.offset}var u=(new Date).getTime(),f=e("handle"),c=e(3),s=e("ee"),p=e(2),d=window,l=d.document,m="addEventListener",v="attachEvent",g=d.XMLHttpRequest,w=g&&g.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:g,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var h=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1118.min.js"},b=g&&w&&w[m]&&!/CriOS/.test(navigator.userAgent),x=n.exports={offset:u,now:a,origin:h,features:{},xhrWrappable:b,userAgent:p};e(1),l[m]?(l[m]("DOMContentLoaded",i,!1),d[m]("load",r,!1)):(l[v]("onreadystatechange",o),d[v]("onload",r)),f("mark",["firstbyte",u],null,"api");var E=0,O=e(5)},{}]},{},["loader"]);</script><link rel="apple-touch-icon" href="https://learning.oreilly.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://learning.oreilly.com/favicon.ico" type="image/x-icon"><link href="Chapter6_files/css.css" rel="stylesheet" type="text/css"><title>6
 Functions - Programming Skills for Data Science: Start Writing Code to 
Wrangle, Analyze, and Visualize Data with R, First Edition</title><link rel="stylesheet" href="Chapter6_files/1f82858304ba.css" type="text/css"><link rel="stylesheet" type="text/css" href="Chapter6_files/annotator.css"><link rel="stylesheet" href="Chapter6_files/font-awesome.css"><style type="text/css" title="ibis-book">@page{margin:1em 2em}#sbo-rt-content div{margin-top:.3em;margin-bottom:.3em;margin-left:1em;margin-right:1.3em}#sbo-rt-content h1.h1{font-size:2em;margin-top:1.5em;margin-bottom:.6em;text-align:center;font-weight:bold;page-break-after:avoid}#sbo-rt-content .part{font-size:2em;margin-top:1em;margin-bottom:1.5em;margin-right:.5em;text-align:right;font-weight:bold;page-break-after:avoid}#sbo-rt-content .h2{font-size:1.8em;margin-top:1em;margin-bottom:2.5em;font-weight:bold;page-break-after:avoid;text-align:right}#sbo-rt-content .h2a{font-size:150%;margin-top:.5em;margin-bottom:3em;font-weight:bold;page-break-after:avoid;text-align:right}#sbo-rt-content .h2c{font-size:1.7em;margin-top:1em;margin-bottom:1.3em;font-weight:bold;page-break-after:avoid;text-align:left}#sbo-rt-content h3.h3{font-size:1.4em;margin-top:1.3em;margin-bottom:.5em;font-weight:bold;page-break-after:avoid;text-align:left;margin-left:1.5em;text-indent:-1.5em}#sbo-rt-content h3.h3z{font-size:1.4em;margin-top:1.3em;margin-bottom:.5em;font-weight:bold;page-break-after:avoid;text-align:left;margin-left:2em;text-indent:-2em}#sbo-rt-content h3.h3a{font-size:1.3em;margin-top:1.2em;margin-bottom:.5em;font-weight:bold;page-break-after:avoid;text-align:left}#sbo-rt-content h4{font-size:1.2em;margin-top:1.3em;margin-bottom:.5em;font-weight:bold;page-break-after:avoid;text-align:left;margin-left:2.2em;text-indent:-2.2em}#sbo-rt-content h5{margin-top:1em;margin-bottom:.5em;font-weight:bold;font-size:105%;page-break-after:avoid;text-align:left}#sbo-rt-content h6{margin-top:1em;margin-bottom:.5em;font-weight:bold;font-size:100%;page-break-after:avoid;text-align:left}#sbo-rt-content div.coverimage img{max-width:99%;max-height:99%}#sbo-rt-content .coverimage{margin-top:.2em;margin-bottom:.2em;text-align:center}#sbo-rt-content .indent{margin-top:.3em;margin-bottom:.3em;text-indent:1.3em}#sbo-rt-content .noindent{margin-top:.5em;margin-bottom:.5em;text-indent:0}#sbo-rt-content .bullet{margin-top:.6em;margin-bottom:.6em;text-indent:0}#sbo-rt-content .bullet-para{margin-top:.6em;margin-bottom:.6em;text-indent:0}#sbo-rt-content .copyright{margin-top:3.5em;margin-bottom:.5em;text-indent:0;font-size:.9em}#sbo-rt-content .copy{margin-top:1em;margin-bottom:.5em;text-indent:0}#sbo-rt-content .author{margin-top:.2em;margin-bottom:7.5em;text-align:center;font-weight:bold;font-size:1.2em}#sbo-rt-content .middle img{vertical-align:middle}#sbo-rt-content div.image img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-top:.42em;text-align:center}#sbo-rt-content .toc-fm{margin-top:.3em;margin-bottom:.3em;text-indent:0;margin-left:2em;text-align:left}#sbo-rt-content .toc-part{margin-top:1.3em;margin-bottom:.5em;text-indent:0;margin-left:.1em;text-align:left}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;text-indent:0;margin-left:1em;text-align:left}#sbo-rt-content .toc-chap1{margin-top:1em;margin-bottom:.5em;text-indent:0;margin-left:.5em;text-align:left}#sbo-rt-content .toc-sec{margin-top:.2em;margin-bottom:.2em;margin-left:3.8em;text-indent:-2em;text-align:left}#sbo-rt-content .toc-bm{margin-top:1.3em;margin-bottom:.2em;text-indent:0;margin-left:1.8em;text-align:left}#sbo-rt-content .border{border-bottom:solid #58585A .1em}#sbo-rt-content .sidebarpara{margin-top:.5em;margin-bottom:.1em;margin-left:1em;text-align:left}#sbo-rt-content .indexmain{margin-top:.2em;margin-bottom:.2em;text-align:left;margin-left:.8em;text-indent:-.8em}#sbo-rt-content .indexsub{margin-top:.2em;margin-bottom:.2em;margin-left:2.5em;text-indent:-.8em;text-align:left}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .heading{page-break-inside:avoid}#sbo-rt-content .all{border-top:black solid .1em;border-bottom:black solid .1em}#sbo-rt-content td{vertical-align:top}#sbo-rt-content table{width:100%;border-collapse:collapse}#sbo-rt-content ul{margin-top:1em;margin-bottom:1em;list-style-type:square}#sbo-rt-content ul.ul1{margin-top:1em;margin-bottom:1em;list-style-type:circle}#sbo-rt-content ul li p{margin-top:.5em;margin-bottom:.5em;color:#000;font-weight:normal}#sbo-rt-content ul li p.bullet{margin-top:.5em;margin-bottom:.5em;font-weight:normal}#sbo-rt-content .number{margin-top:.3em;margin-bottom:.3em;text-indent:0}#sbo-rt-content ol{margin-top:.8em;margin-bottom:.8em;margin-left:0;font-weight:normal}#sbo-rt-content ol li{color:#000;margin-top:.017em;margin-bottom:.017em}#sbo-rt-content ol.left{margin-top:.5em;margin-bottom:.5em;margin-left:2em;font-weight:normal}#sbo-rt-content ol li p{color:#000;font-weight:normal}#sbo-rt-content .blockquote{margin-top:.8em;margin-bottom:.8em;margin-left:2.5em;margin-right:2.5em;font-size:.9em}#sbo-rt-content .h3i{font-size:1.3em;margin-top:1em;margin-bottom:.3em;font-weight:bold;page-break-after:avoid;text-align:left}#sbo-rt-content .h3b{margin-top:1em;margin-bottom:1em;border-bottom:solid .01em;margin-left:.1em;font-weight:bold;text-align:left}#sbo-rt-content .pre{font-family:Courier New,monospace;font-size:.88em;margin-top:.5em;margin-bottom:.5em;margin-left:.1em;background-color:#F3F4F4;text-align:left;padding:.2em}#sbo-rt-content .prea{font-family:Courier New,monospace;font-size:.88em;margin-top:.8em;margin-bottom:.8em;margin-left:.2em;text-align:left}#sbo-rt-content .right{margin-top:1em;margin-bottom:1em;text-align:right;font-size:.9em}#sbo-rt-content figcaption{font-size:.9em;margin-top:.5em;margin-bottom:.1em;font-weight:normal;color:#000}#sbo-rt-content figure{margin-top:1em;margin-bottom:1em;margin-left:1.5em;margin-right:1.5em}#sbo-rt-content figure>img{max-width:99%;max-height:99%}#sbo-rt-content div.image-p img{max-width:99%;max-height:99%}#sbo-rt-content .image-p{page-break-before:always;text-align:center}#sbo-rt-content div.image-pa img{max-width:99%;max-height:99%}#sbo-rt-content .image-pa{text-align:center}#sbo-rt-content .codelink{font-size:.88em;margin-top:.5em;margin-bottom:.5em;font-weight:bold;page-break-after:avoid}#sbo-rt-content .notepara{margin-top:.5em;margin-bottom:.5em;text-indent:0;margin-left:1em;text-align:left}#sbo-rt-content .note-m{margin-top:1em;margin-bottom:1em;margin-left:1.3em;margin-right:1.3em;border-radius:.7em;padding:.5em;border:solid #F3C7CC .2em;background-color:#F7D6D9;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .note-g{margin-top:1em;margin-bottom:1em;margin-left:1.3em;margin-right:1.3em;border-radius:.7em;padding:.5em;border:solid #C5E4CA .2em;background-color:#D5EBDA;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .note-y{margin-top:1em;margin-bottom:1em;margin-left:1.3em;margin-right:1.3em;border-radius:.7em;padding:.5em;border:solid #FEB .2em;background-color:#FFF3CD;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .note-b{margin-top:1em;margin-bottom:1em;margin-left:1.3em;margin-right:1.3em;border-radius:.7em;padding:.5em;border:solid #BDDAF2 .2em;background-color:#CFE4F6;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .box-ash{margin-top:1em;margin-bottom:1em;margin-left:1.3em;margin-right:1.3em;border-radius:.7em;padding:.5em;border:solid #DDDEDF .15em;background-color:#F1F1F2;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .footnote{margin-top:.5em;margin-bottom:.5em;margin-left:1em;text-indent:1em;text-align:left;font-size:.8em}#sbo-rt-content .footnotesb{font-size:.8em;margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.8em;text-align:left}#sbo-rt-content .BoldItalic{font-family:courier New,monospace;font-weight:bold;font-style:italic}#sbo-rt-content .subtitle{margin-top:.1em;text-align:center;margin-bottom:2.5em;font-weight:bold;font-size:1.5em}#sbo-rt-content .publisher{margin-top:.2em;margin-bottom:.5em;text-align:center}#sbo-rt-content .address{margin-top:.1em;margin-bottom:.2em;text-align:center}#sbo-rt-content .ded{margin-top:6em;margin-bottom:.5em;margin-left:2em;margin-right:2em;text-align:center}#sbo-rt-content .pd_ash{color:#666}#sbo-rt-content .pd_red1{color:#CD5E27}#sbo-rt-content .pd_red{color:#ed1c24}#sbo-rt-content .pd_yellow{color:#A28951}#sbo-rt-content .pd_maroon{color:#721B24}#sbo-rt-content .pd_ora1{color:#C2A02E}#sbo-rt-content .pd_maroon1{color:#9d5a11}#sbo-rt-content .pd_green{color:#6D9878}#sbo-rt-content .pd_green1{color:#34b352}#sbo-rt-content .pd_blue{color:#035090}#sbo-rt-content .pd_blue2{color:#1224ff}#sbo-rt-content .pd_ash1{color:#939598}#sbo-rt-content .title{margin-top:.2em;margin-bottom:.2em;font-weight:bold;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .box{margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;margin-right:1.3em;border:solid #000 .15em;padding:.1em .5em .1em .5em}#sbo-rt-content .credit{margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:-1.5em}#sbo-rt-content .bordert{border-top:solid #919395 .1em;border-bottom:solid #919395 .1em}#sbo-rt-content .strike{text-decoration:line-through}#sbo-rt-content .tab-para{margin-top:.2em;margin-bottom:.2em;margin-left:1.2em;text-indent:-.8em}#sbo-rt-content .tab-para1{margin-top:.2em;margin-bottom:.2em;margin-left:.3em;text-indent:0}#sbo-rt-content .tab-right{margin-top:.2em;margin-bottom:.2em;margin-right:2em;text-indent:0;text-align:right}#sbo-rt-content .tab-center{margin-top:.2em;margin-bottom:.2em;text-indent:0;text-align:center}#sbo-rt-content .thead_right{margin-top:.2em;margin-bottom:.2em;margin-right:2em;text-indent:0;text-align:right}#sbo-rt-content .tab-right1{margin-top:.2em;margin-bottom:.2em;margin-left:0;text-indent:0;text-align:right}#sbo-rt-content .thead{margin-top:.2em;margin-bottom:.2em;margin-left:.4em;text-indent:0;text-align:left}#sbo-rt-content .theada{margin-top:.2em;margin-bottom:.2em;margin-left:0;text-indent:0;text-align:left}#sbo-rt-content .thead1{margin-top:.2em;margin-bottom:.2em;margin-right:1em;text-indent:0;text-align:right}#sbo-rt-content .tab-caption{font-size:.9em;margin-top:.5em;margin-bottom:.3em;font-weight:normal}#sbo-rt-content .tab-heading{margin-top:1em;margin-bottom:1em;page-break-inside:avoid}#sbo-rt-content .big{font-size:1.5em;color:#939598}#sbo-rt-content .hidden{display:none;visibility:hidden}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780135159071/chapter/ch01.xhtml",
          "book_id": "9780135159071",
          "chapter_uri": "ch01.xhtml",
          "position": 0,
          "user_uuid": "84c171ee-4dd7-4bd0-a2bc-254287669aaa",
          "next_chapter_uri": "/library/view/programming-skills-for/9780135159071/ch02.xhtml"
        
      },
      title: "Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition",
      author_list: "Michael Freeman, Joel Ross",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="Chapter6_files/modernizr.js"></script><script>
    
      

      
        
          window.PUBLIC_ANNOTATIONS = true;
        
      

      window.MOBILE_PUBLIC_ANNOTATIONS = false;

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": false
        }
      };
  </script><link rel="canonical" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml"><meta name="description" content="1 Setting Up Your Computer In order to write code to work with data, you will need to use a number of different (free) software programs for writing, executing, and ... "><meta property="og:title" content="1 Setting Up Your Computer"><meta itemprop="isPartOf" content="/library/view/programming-skills-for/9780135159071/"><meta itemprop="name" content="1 Setting Up Your Computer"><meta property="og:url" itemprop="url" content="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://learning.oreilly.com/library/cover/9780135159071/"><meta property="og:description" itemprop="description" content="1 Setting Up Your Computer In order to write code to work with data, you will need to use a number of different (free) software programs for writing, executing, and ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780135159071"><meta property="og:book:author" itemprop="author" content="Michael Freeman"><meta property="og:book:author" itemprop="author" content="Joel Ross"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: 0.9em !important; }</style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
    (function(i,s,o,g,r,a,m) {
      i['GoogleAnalyticsObject']=r;
      i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
      a=s.createElement(o),m=s.getElementsByTagName(o)[0];
      a.async=1;
      a.src=g;
      m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

    if (matches && matches.length === 2) {
      user_uuid = matches[1];
    }

  
    ga('create', 'UA-39299553-7', {'userId': '84c171ee-4dd7-4bd0-a2bc-254287669aaa' });
  

  
    
      ga('set', 'dimension1', 'B2B');
    
  

  ga('set', 'dimension6', user_uuid);

  
    ga('set', 'dimension2', '84c171ee-4dd7-4bd0-a2bc-254287669aaa');
    
      ga('set', 'dimension7', '0014100001uibI4AAI');
    
  

  

  

  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
  </script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="defer" src="Chapter6_files/vendor.js"></script><script defer="defer" src="Chapter6_files/reader.js"></script><script async="" src="Chapter6_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts library nav-collapsed">

    
  <noscript> 
    <iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden">
    </iframe>
  </noscript>



    
      <div class="working hide" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://learning.oreilly.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://learning.oreilly.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://learning.oreilly.com/playlists/" class="t-queue-nav l0 nav-icn None"><!--?xml version="1.0" encoding="UTF-8"?--><svg width="21px" height="17px" viewBox="0 0 21 17" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink"><!-- Generator: Sketch 46.2 (44496) - http://www.bohemiancoding.com/sketch --><title>icon_Playlist_sml</title><desc>Created with Sketch.</desc><defs></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="icon_Playlist_sml" fill-rule="nonzero" fill="#000000"><g id="playlist-icon"><g id="Group-6"><rect id="Rectangle-path" x="5" y="0" width="16" height="3" rx="0.5"></rect><circle id="Oval" cx="1.5" cy="1.5" r="1.5"></circle></g><g id="Group-5" transform="translate(0.000000, 7.000000)"><circle id="Oval" cx="1.5" cy="1.5" r="1.5"></circle><rect id="Rectangle-path" x="5" y="0" width="16" height="3" rx="0.5"></rect></g><g id="Group-5-Copy" transform="translate(0.000000, 14.000000)"><circle id="Oval" cx="1.5" cy="1.5" r="1.5"></circle><rect id="Rectangle-path" x="5" y="0" width="16" height="3" rx="0.5"></rect></g></g></g></g></svg><span>
               Playlists
            </span></a></li><li class="search"><a href="#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://learning.oreilly.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://learning.oreilly.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://learning.oreilly.com/learning-paths/" class="l1 nav-icn t-learningpaths-nav js-toggle-menu-item"><!--?xml version="1.0" encoding="UTF-8"?--><svg width="32px" height="32px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink"><!-- Generator: Sketch 52.5 (67469) - http://www.bohemiancoding.com/sketch --><title>Mask</title><desc>Created with Sketch.</desc><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><path d="M0,16.0214227 C0,15.0387209 0.796453294,14.2411658 1.77779753,14.2411658 C2.75914177,14.2411658 3.55559506,15.0387209 3.55559506,16.0214227 C3.55559506,17.0041246 2.75914177,17.8016797 1.77779753,17.8016797 C0.796453294,17.8016797 0,17.0041246 0,16.0214227 Z M9.77788642,5.22914885 C8.9280992,5.72049977 7.84008711,5.42853763 7.34941499,4.57757479 C6.85874287,3.72661195 7.15030167,2.63709467 8.00008889,2.14574375 C8.84987611,1.65439282 9.9378882,1.94635496 10.4285603,2.7973178 C10.9192324,3.64828064 10.6276736,4.73779792 9.77788642,5.22914885 Z M4.57213969,7.35869225 C5.42192691,7.85004318 5.71348571,8.93956046 5.22281359,9.79052329 C4.73214147,10.6414861 3.64412938,10.9334483 2.79434216,10.4420974 C1.94455494,9.95074642 1.65299614,8.86122915 2.14366826,8.01026631 C2.63434038,7.15930347 3.72235247,6.86734132 4.57213969,7.35869225 Z M2.79434216,21.6007481 C3.64412938,21.1093972 4.73214147,21.4013594 5.22281359,22.2523222 C5.71348571,23.103285 5.42192691,24.1928023 4.57213969,24.6841532 C3.72235247,25.1755042 2.63434038,24.883542 2.14366826,24.0325792 C1.65299614,23.1816163 1.94455494,22.0920991 2.79434216,21.6007481 Z M7.34941499,27.4652707 C7.84008711,26.6143079 8.9280992,26.3223457 9.77788642,26.8136966 C10.6276736,27.3050476 10.9192324,28.3945649 10.4285603,29.2455277 C9.9378882,30.0964905 8.84987611,30.3884527 8.00008889,29.8971017 C7.15030167,29.4057508 6.85874287,28.3162335 7.34941499,27.4652707 Z M18.7118524,11.3165596 C21.3074367,12.8173162 22.1963355,16.1392758 20.6976522,18.738451 C19.1989689,21.3358459 15.8815987,22.2259744 13.2860143,20.726998 C10.6922077,19.2262414 9.80330893,15.9042818 11.3002144,13.3051066 C12.7988978,10.7059314 16.116268,9.81580294 18.7118524,11.3165596 Z M26.7821642,27.8093944 L30.1315348,31.1633985 C30.3982044,31.4304371 30.2097579,31.8844026 29.8346426,31.8844026 L21.5945511,31.8844026 C21.1287681,31.8844026 20.751875,31.5069881 20.751875,31.0405608 L20.751875,22.7890697 C20.751875,22.4134355 21.2052134,22.2247282 21.4701052,22.4899865 L24.2843587,25.3081333 C26.8337204,23.0240636 28.4444049,19.7092251 28.4444049,16.0223129 C28.4444049,9.15052091 22.8621207,3.56051397 15.9998222,3.56051397 L15.9998222,0 C24.8230314,0 32,7.18689745 32,16.0223129 C32,20.6919269 29.9750886,24.8790914 26.7821642,27.8093944 Z" id="Mask" fill="#8B889A"></path></g></svg><span>Learning Paths</span></a></li><li class="nav-highlights"><a href="https://learning.oreilly.com/u/84c171ee-4dd7-4bd0-a2bc-254287669aaa/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://learning.oreilly.com/u/preferences/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.oreilly.com/online-learning/support/" class="l1 no-icon">Support</a></li><li><a href="https://learning.oreilly.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://learning.oreilly.com/u/preferences/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.oreilly.com/online-learning/support/" class="l2">Support</a></li><li><a href="https://learning.oreilly.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition
      
    </h1></span></a><div class="toc-contents" style="max-height: 0px;" tabindex="-1">
  <div class="sbo-toc ">
    <button type="button" class="sbo-toc-thumb close"><div class="visuallyhidden">Close</div></button>
      <section class="ios-app-teaser">
        <ul>
            <li><a class="js-toc-link toc-link" href="https://itunes.apple.com/gb/app/safari-queue-library-over/id881697395?mt=8" role="button">Install App</a></li>
            <li><a class="js-toc-link toc-link" href="safaridetail://9780135159071" role="button">Open in App</a></li>
        </ul>
      </section>
      <div class="sbo-book-meta">
        
        <span class="cover">
         <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/">
          <img src="Chapter6_files/a.jpg" alt="Cover image for Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition" width="139" height="184">
        </a>
        </span>
        <span class="title">
          
            
                <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/publisher/addison-wesley-professional/">
                  <img src="Chapter6_files/addison-wesley.png" class="publisher-logo video" alt="publisher logo">
                </a>
            
          

          <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/">Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R, First Edition</a>
        </span>
        
        <span class="authors">by Michael Freeman; Joel Ross</span>
        

        
        <span class="publishers t-publishers">Published by
          <!-- Show publisher page link if publisher pages switch is on -->
          
            <a class="t-publisher-link toc-link js-toc-link" href="https://learning.oreilly.com/library/publisher/addison-wesley-professional/">
              Addison-Wesley Professional</a>, 2018
          
        </span>
        

    

    </div>
  <ol class="tocList">
    
    
    
     

     <li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/cover.xhtml">
        Cover Page <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref00.xhtml">
        About This E-Book <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/title.xhtml">
        Title Page <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/copyright.xhtml">
        Copyright Page <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ded01.xhtml">
        Dedication Page <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/toc.xhtml">
        Contents <span class="minutes">(03:27 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref02.xhtml">
        Foreword <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref03.xhtml">
        Preface <span class="minutes">(09:12 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref04.xhtml">
        Acknowledgments <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref05.xhtml">
        About the Authors <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part01.xhtml">
        I Getting Started <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml">
        1 Setting Up Your Computer <span class="minutes">(11:30 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch02.xhtml#ch02">
        2 Using the Command Line 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part02.xhtml">
        II Managing Projects <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch03.xhtml#ch03">
        3 Version Control with git and GitHub 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch04.xhtml#ch04">
        4 Using Markdown for Documentation 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part03.xhtml">
        III Foundational R Skills <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2 currently-reading">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch05.xhtml#ch05">
        5 Introduction to R 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06">
        6 Functions 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch07.xhtml#ch07">
        7 Vectors 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch08.xhtml#ch08">
        8 Lists 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part04.xhtml">
        IV Data Wrangling <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch09.xhtml#ch09">
        9 Understanding Data 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch10.xhtml#ch10">
        10 Data Frames 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch11.xhtml#ch11">
        11 Manipulating Data with dplyr 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch12.xhtml#ch12">
        12 Reshaping Data with tidyr 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch13.xhtml#ch13">
        13 Accessing Databases 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch14.xhtml#ch14">
        14 Accessing Web APIs 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part05.xhtml">
        V Data Visualization <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch15.xhtml#ch15">
        15 Designing Data Visualizations 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch16.xhtml#ch16">
        16 Creating Visualizations with ggplot2 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch17.xhtml#ch17">
        17 Interactive Visualization in R 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/part06.xhtml">
        VI Building and Sharing Applications <span class="minutes">(01:09 mins)</span>
       </a>
      
        
      
    
    
     
     <ul class="toc-level-2">
     

     <li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch18.xhtml#ch18">
        18 Dynamic Reports with R Markdown 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch19.xhtml#ch19">
        19 Building Interactive Web Applications with Shiny 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch20.xhtml#ch20">
        20 Working Collaboratively 
       </a>
      
        
      
    
    
     

     </li><li class="toc-level2">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch21.xhtml#ch21">
        21 Moving Forward 
       </a>
      
        
      
    
    
    </li></ul>
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/index.xhtml">
        Index <span class="minutes">(32:12 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/app01.xhtml">
        Credits <span class="minutes">(04:36 mins)</span>
       </a>
      
        
      
    
    
     

     </li><li class="toc-level1">
        
        <a class="js-toc-link toc-link" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/pref03_images.xhtml#pref03_images">
        Code Snippets 
       </a>
      
        
      
   </li></ol>
 </div>



</div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><div class="js-content-uri" data-content-uri="/api/v1/book/9780135159071/chapter/ch01.xhtml"><div class="js-collections-dropdown collections-dropdown menu-bit-cards"><div data-reactroot="" class="menu-dropdown-wrapper js-menu-dropdown-wrapper align-right"><img class="hidden" src="Chapter6_files/ajax-transp.gif" alt="loading spinner"><div class="menu-control"><div class="control "><div class="js-playlists-menu"><button class="js-playlist-icon"><svg class="icon-add-to-playlist-sml" viewBox="0 0 16 14" version="1.1" xmlns="http://www.w3.org/2000/svg"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g fill-rule="nonzero" fill="#000000"><g transform="translate(-1.000000, 0.000000)"><rect x="5" y="0" width="12" height="2"></rect><title>Playlists</title><path d="M4.5,14 C6.43299662,14 8,12.4329966 8,10.5 C8,8.56700338 6.43299662,7 4.5,7 C2.56700338,7 1,8.56700338 1,10.5 C1,12.4329966 2.56700338,14 4.5,14 Z M2.5,10 L4,10 L4,8.5 L5,8.5 L5,10 L6.5,10 L6.5,11 L5,11 L5,12.5 L4,12.5 L4,11 L2.5,11 L2.5,10 Z"></path><circle cx="2" cy="5" r="1"></circle><circle cx="1.94117647" cy="1" r="1"></circle><rect x="5" y="4" width="12" height="2"></rect><rect x="9" y="8" width="8" height="2"></rect><rect x="9" y="12" width="8" height="2"></rect></g></g></g></svg><div class="js-playlist-addto-label">Add&nbsp;To</div></button></div></div></div></div></div></div></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li class=""><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml&amp;text=Programming%20Skills%20for%20Data%20Science%3A%20Start%20Writing%20Code%20to%20Wrangle%2C%20Analyze%2C%20and%20Visualize%20Data%20with%20R%2C%20First%20Edition&amp;via=safari"><span>Twitter</span></a></li><li class=""><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml"><span>Facebook</span></a></li><li class=""><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml"><span>Google Plus</span></a></li><li class=""><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari: 1%20Setting%20Up%20Your%20Computer&amp;body=https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch01.xhtml%0D%0Afrom Programming%20Skills%20for%20Data%20Science%3A%20Start%20Writing%20Code%20to%20Wrangle%2C%20Analyze%2C%20and%20Visualize%20Data%20with%20R%2C%20First%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch05.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">5 Introduction to R</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch07.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">7 Vectors</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 class="h2" id="ch06"><span epub:type="pagebreak" id="page_69"></span><span class="big">6</span><br>Functions</h2>
<p class="noindent">As you begin to take on data science projects, you 
will find that the tasks you perform will involve multiple different 
instructions (lines of code). Moreover, you will often want to be able 
to repeat these tasks (both within and across projects). For example, 
there are many steps involved in computing summary statistics for some 
data, and you may want to repeat this analysis for different variables 
in a data set or perform the same type of analysis across two different 
data sets. Planning out and writing your code will be notably easier if 
can you group together the lines of code associated with each 
overarching task into a single step.</p>
<p class="noindent">Functions represent a way for you to add a label to a
 group of instructions. Thinking about the tasks you need to perform 
(rather than the individual lines of code you need to write) provides a 
useful <em>abstraction</em> in the way you think about your programming.
 It will help you hide the details and generalize your work, allowing 
you to better reason about it. Instead of thinking about the many lines 
of code involved in each task, you can think about the task itself 
(e.g., <code>compute_summary_ stats()</code>). In addition to helping 
you better reason about your code, labeling groups of instructions will 
allow you to save time by reusing your code in different 
contexts—repeating the task without rewriting the individual 
instructions.</p>
<p class="noindent">This chapter explores how to use functions in <code>R</code>
 to perform advanced capabilities and create code that is flexible for 
analyzing multiple data sets. After considering a function in a general 
sense, it discusses using built-in <code>R</code> functions, accessing additional functions by loading <code>R</code> packages, and writing your own functions.</p>
<div class="heading">
<h3 class="h3" id="sec6_1">6.1 What Is a Function?</h3>
<p class="noindent">In a broad sense, a <strong>function</strong> is a 
named sequence of instructions (lines of code) that you may want to 
perform one or more times throughout a program. Functions provide a way 
of <em>encapsulating</em> multiple instructions into a single “unit” 
that can be used in a variety of contexts. So, rather than needing to 
repeatedly write down all the individual instructions for drawing a 
chart for every one of your variables, you can define a <code>make_chart()</code> function once and then just <strong>call</strong> (execute) that function when you want to perform those steps.</p>
</div>
<p class="noindent">In addition to grouping instructions, functions in programming languages like <code>R</code>
 tend to follow the mathematical definition of functions, which is a set
 of operations (instructions!) that are performed on some <strong>inputs</strong> and lead to some <strong>outputs</strong>. Function inputs are called <strong>arguments</strong> (also <span epub:type="pagebreak" id="page_70"></span>referred to as <strong>parameters</strong>); specifying an argument for a function is called <strong>passing</strong> the argument into the function (like passing a football). A function then <strong>returns</strong>
 an output to use. For example, imagine a function that can determine 
the largest number in a set of numbers—that function’s input would be 
the set of numbers, and the output would be the largest number in the 
set.</p>
<p class="noindent">Grouping instructions into reusable functions is 
helpful throughout the data science process, including areas such as the
 following:</p>
<ul>
<li><p class="bullet"><em>Data management</em>: You can group instructions for loading and organizing data so they can be applied to multiple data sets.</p></li>
<li><p class="bullet"><em>Data analysis</em>: You can store the steps for calculating a metric of interest so that you can repeat your analysis for multiple variables.</p></li>
<li><p class="bullet"><em>Data visualization</em>: You can define a 
process for creating graphics with a particular structure and style so 
that you can generate consistent reports.</p></li>
</ul>
<div class="heading">
<h4 id="sec6_1_1">6.1.1 <code><strong>R</strong></code> Function Syntax</h4>
<p class="noindent"><code>R</code> functions are referred to by name 
(technically, they are values like any other variable). As in many 
programming languages, you call a function by writing the name of the 
function followed immediately (no space) by parentheses <code><strong>()</strong></code>. Inside the parentheses, you put the arguments (inputs) to the function separated by commas (<code><strong>,</strong></code>). Thus, computer functions look just like multi-variable mathematical functions, but with names longer than <code>f()</code>. Here are a few examples of using functions that are included in the <code>R</code> language:</p>
</div>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0070-01a" id="p0070-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Call the print() function, passing it "Hello world" as an argument</span>
<span class="pd_blue"><strong>print</strong></span>(<span class="pd_green1">"Hello world"</span>)
<span class="pd_maroon1"># [1] "Hello world"</span>

<span class="pd_maroon1"># Call the sqrt() function, passing it 25 as an argument</span>
<span class="pd_blue"><strong>sqrt</strong></span> (<span class="pd_blue">25</span>) <span class="pd_maroon1"># returns 5 (square root of 25)</span>

<span class="pd_maroon1"># Call the min() function, passing it 1, 6/8, and 4/3 as arguments
# This is an example of a function that takes multiple arguments</span>
<span class="pd_blue"><strong>min</strong></span>(<span class="pd_blue">1</span>, <span class="pd_blue">6</span> <span class="pd_red1"><strong>/</strong></span> <span class="pd_blue">8</span>, <span class="pd_blue">4</span> <span class="pd_red1"><strong>/</strong></span> <span class="pd_blue">3</span>) <span class="pd_maroon1"># returns 0.75 (6/8 is the smallest value)</span></pre>
<div class="note-y">
<p class="title">Remember</p>
<p class="notepara">In this text, we always include empty parentheses <code>()</code>
 when referring to a function by name to help distinguish between 
variables that hold functions and variables that hold values (e.g., <code>add_values()</code> versus <code>my_value</code>).
 This does not mean that the function takes no arguments; instead, it is
 just a useful shorthand for indicating that a variable holds a function
 (<em>not</em> a value).</p>
</div>
<p class="noindent">If you call any of these functions interactively, <code>R</code>
 will display the returned value (the output) in the console. However, 
the computer is not able to “read” what is written in the console—that’s
 for humans to view! If you want the computer to be able to <em>use</em> a returned value, you will need to give <span epub:type="pagebreak" id="page_71"></span>that value a name so that the computer can refer to it. That is, you need to store the returned value in a variable:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0071-01a" id="p0071-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Store the minimum value of a vector in the variable `smallest_number`</span>
smallest_number &lt;- <span class="pd_blue"><strong>min</strong></span>(<span class="pd_blue">1</span>, <span class="pd_blue">6</span> <span class="pd_red1"><strong>/</strong></span> <span class="pd_blue">8</span>, <span class="pd_blue">4</span> <span class="pd_red1"><strong>/</strong></span> <span class="pd_blue">3</span>)

<span class="pd_maroon1"># You can then use the variable as usual, such as for a comparison</span>
min_is_greater_than_one &lt;- smallest_number <span class="pd_red1"><strong>&gt;</strong></span> <span class="pd_blue">1</span> <span class="pd_maroon1"># returns FALSE</span>

<span class="pd_maroon1"># You can also use functions inline with other operations</span>
phi &lt;- <span class="pd_blue">.5</span> <span class="pd_red1"><strong>+</strong></span> <span class="pd_blue"><strong>sqrt</strong></span>(<span class="pd_blue">5</span>) <span class="pd_red1"><strong>/</strong></span> <span class="pd_blue">2</span> <span class="pd_maroon1"># returns 1.618034</span>

<span class="pd_maroon1"># You can pass the result of a function as an argument to another function
# Watch out for where the parentheses close!</span>
<span class="pd_blue"><strong>print</strong></span>(<span class="pd_blue"><strong>min</strong></span>(<span class="pd_blue">1.5</span>, <span class="pd_blue"><strong>sqrt</strong></span>(<span class="pd_blue">3</span>)))
<span class="pd_maroon1"># [1] 1.5</span></pre>
<p class="noindent">In the last example, the resulting value of the “inner” function function—<code>sqrt()</code>—is
 immediately used as an argument. Because that value is used 
immediately, you don’t have to assign it a separate variable name. 
Consequently, it is known as an <strong>anonymous variable</strong>.</p>
<div class="heading">
<h3 class="h3" id="sec6_2">6.2 Built-in <code><strong>R</strong></code> Functions</h3>
<p class="noindent">As you have likely noticed, <code>R</code> comes with a variety of functions that are built into the language (also referred to as “<em>base</em>” <code>R</code> functions). The preceding example used the <code>print()</code> function to print a value to the console, the <code>min()</code> function to find the smallest number among the arguments, and the <code>sqrt()</code> function to take the square root of a number. <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06tab01">Table 6.1</a> provides a <em>very</em> limited list of functions you might experiment with (or see a few more from <em>Quick-R</em><a id="ch06fn1a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn1" class="totri-footnote"><sup>1</sup></a>).</p>
</div>
<div class="tab-heading">
<p class="tab-caption"><a id="ch06tab01"></a><span class="pd_ash">Table 6.1</span> <strong>Examples and descriptions of frequently used <code>R</code> functions</strong></p>
<table class="all">
<tbody>
<tr>
<td class="bordert"><p class="theada"><strong>Function Name</strong></p></td>
<td class="bordert"><p class="thead"><strong>Description</strong></p></td>
<td class="bordert"><p class="thead"><strong>Example</strong></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>sum(a, b, ...)</code></p></td>
<td><p class="tab-para">Calculates the sum of all input values</p></td>
<td><p class="tab-para"><code>sum(1, 5)</code> <em># returns</em> <code>6</code></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>round(x, digits)</code></p></td>
<td><p class="tab-para">Rounds the first argument to the given number of digits</p></td>
<td><p class="tab-para"><code>round(3.1415, 3)</code> <em># returns</em> <code>3.142</code></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>toupper(str)</code></p></td>
<td><p class="tab-para">Returns the characters in uppercase</p></td>
<td><p class="tab-para"><code>toupper("hi mom")</code> <em># returns</em> <code>"HI MOM"</code></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>paste(a, b, ...)</code></p></td>
<td><p class="tab-para"><em>Concatenates</em> (combines) characters into one value</p></td>
<td><p class="tab-para"><code>paste("hi", "mom")</code> <em># returns</em> <code>"hi mom"</code></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>nchar(str)</code></p></td>
<td><p class="tab-para">Counts the number of characters in a string (including spaces and punctuation)</p></td>
<td><p class="tab-para"><code>nchar("hi mom")</code> <em># returns</em> <code>6</code></p></td>
</tr>
<tr>
<td><p class="tab-para1"><code>c(a, b, ...)</code></p></td>
<td><p class="tab-para"><em>Concatenates</em> (combines) multiple items into a <em>vector</em> (see <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch07.xhtml#ch07">Chapter 7</a>)</p></td>
<td><p class="tab-para"><code>c(1, 2)</code> <em># returns</em> <code>1, 2</code></p></td>
</tr>
<tr>
<td class="border"><p class="tab-para1"><code>seq(a, b)</code></p></td>
<td class="border"><p class="tab-para">Returns a sequence of numbers from <code>a</code> to <code>b</code></p></td>
<td class="border"><p class="tab-para"><code>seq(1, 5)</code> <em># returns</em> <code>1, 2, 3, 4, 5</code></p></td>
</tr>
</tbody>
</table>
</div>
<p class="footnote"><a id="ch06fn1" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn1a" class="totri-footnote"><sup>1</sup></a><strong>Quick-R: Built-in Functions:</strong> <a href="http://www.statmethods.net/management/functions.html">http://www.statmethods.net/management/functions.html</a></p>
<p class="noindent">To learn more about any individual function, you can look it up in the <code>R</code> documentation by using <code>?FUNCTION_NAME</code> as described in <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch05.xhtml#ch05">Chapter 5</a>.</p>
<div class="note-g">
<p class="title">Tip</p>
<p class="notepara">Part of learning any programming language is 
identifying which functions are available in that language and 
understanding how to use them. Thus, you should look around and become 
familiar with these functions—but do not feel that you need to memorize 
them! It’s enough to be aware that they exist, and then be able to look 
up the name and arguments for that function. As you can imagine, Google 
also comes in handy here (i.e., <em>“how to DO_TASK in R”</em>).</p>
</div>
<p class="noindent">This is just a tiny taste of the many different functions available in <code>R</code>. More functions will be introduced throughout the text, and you can also see a nice list of options in the <em>R Reference Card</em><a id="ch06fn2a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn2" class="totri-footnote"><sup>2</sup></a> cheatsheet.</p>
<p class="footnote"><a id="ch06fn2" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn2a" class="totri-footnote"><sup>2</sup></a><strong>R Reference Card:</strong> cheatsheet summarizing built-in <code>R</code> functions: <a href="https://cran.r-project.org/doc/contrib/Short-refcard.pdf">https://cran.r-project.org/doc/contrib/Short-refcard.pdf</a></p>
<div class="heading">
<h4 id="sec6_2_1"><span epub:type="pagebreak" id="page_72"></span>6.2.1 Named Arguments</h4>
<p class="noindent">Many functions have both <em>required arguments</em> (values that you must provide) and <em>optional arguments</em> (arguments that have a “default” value, unless you specify otherwise). Optional arguments are usually specified using <strong>named arguments</strong>,
 in which you specify that an argument value has a particular name. As a
 result, you don’t need to remember the order of optional arguments, but
 can instead simply reference them by name.</p>
</div>
<p class="noindent">Named arguments are written by putting the name of the argument (which is like a variable name), followed by the equals symbol (<code><strong>=</strong></code>), followed by the value to pass to that argument. For example:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0072-01a" id="p0072-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Use the `sep` named argument to specify the separator is '+++'</span>
<span class="pd_blue"><strong>paste</strong></span>(<span class="pd_green1">"Hi"</span>, <span class="pd_green1">"Mom"</span>, <span class="pd_blue">sep =</span> <span class="pd_green1">"+++"</span>) <span class="pd_maroon1"># returns "Hi+++Mom"</span></pre>
<p class="noindent">Named arguments are almost always optional (since 
they have default values), and can be included in any order. Indeed, 
many functions allow you to specify arguments either as <strong>positional arguments</strong>
 (called such because they are determined by their position in the 
argument list) or with a name. For example, the second positional 
argument to the <code>round()</code> function can also be specified as the named argument <code>digits</code>:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0072-02a" id="p0072-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># These function calls are all equivalent, though the 2nd is most clear/common</span>
<span class="pd_blue"><strong>round</strong></span>(<span class="pd_blue">3.1415</span>, <span class="pd_blue">3</span>) <span class="pd_maroon1"># 3.142</span>
<span class="pd_blue"><strong>round</strong></span>(<span class="pd_blue">3.1415</span>, <span class="pd_blue">digits = 3</span>) <span class="pd_maroon1"># 3.142</span>
<span class="pd_blue"><strong>round</strong></span>(<span class="pd_blue">digits = 3</span>, <span class="pd_blue">3.1415</span>) <span class="pd_maroon1"># 3.142</span></pre>
<p class="noindent">To see a list of arguments—required or optional, 
positional or named—available to a function, look it up in the 
documentation (e.g., using <code>?FUNCTION_NAME</code>). For example, if you look up the <code>paste()</code> <span epub:type="pagebreak" id="page_73"></span>function (using <code>?paste</code> in RStudio), you will see the documentation shown in <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#fig6_1">Figure 6.1</a>. The <em>usage</em> displayed —<code>paste (..., sep = " ", collapse = NULL)</code>— specifies that the function takes any number of positional arguments (represented by the <code>...</code>), as well as two additional named arguments: <code>sep</code> (whose default value is <code>" "</code>, making pasted words default to having a space between them) and <code>collapse</code> (used when pasting <em>vectors</em>, described in <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch07.xhtml#ch07">Chapter 7</a>).</p>
<figure id="fig6_1">
<img src="Chapter6_files/06fig01.jpg" aria-describedby="alt_06fig01" alt="A screenshot shows the documentation for paste() function in the Rstudio interface." data-mfp-src="/library/view/programming-skills-for/9780135159071/graphics/06fig01.jpg" width="575" height="442">
<figcaption><span class="pd_ash">Figure 6.1</span> Documentation for the <code>paste()</code> function, as shown in RStudio.
<aside class="hidden" id="alt_06fig01">
<p>The bottom right of the Rstudio interface is shown and the Help tab 
is selected. The tab displays the documentation for paste() function. 
The header is Concatenate strings, which consists of three sections 
namely description, usage, and arguments. The description reads, 
concatenate vectors after converting to the character. The usage reads, 
paste (. . ., sep = " ", collapse = NULL) and paste0 (. . ., collapse = 
NULL). The arguments read: . . . represents one or more R objects, to be
 converted to character vectors, sep represents a character string to 
separate the terms and Not NA_character, and collapse represents an 
optical character string to separate the results and Not NA_character.</p>
</aside>
</figcaption>
</figure>
<div class="note-g">
<p class="title">Tip</p>
<p class="notepara">In <code>R</code>’s documentation, functions that require a limited number of unnamed arguments will often refer to them as <code>x</code>. For example, the documentation for <code>round()</code> is listed as follows: <code>round(x, digits = 0)</code>. The <code>x</code> just means “the data value to run this function on.”</p>
</div>
<div class="note-b">
<p class="title">Fun Fact</p>
<p class="notepara">The mathematical operators (e.g., <code>+</code>) are actually functions in <code>R</code> that take two arguments (the operands). The familiar mathematical notation is just a shortcut.</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0073-01a" id="p0073-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># These two lines of code are the same:</span>
x &lt;- <span class="pd_blue">2</span> + <span class="pd_blue">3</span> <span class="pd_maroon1"># add 2 and 3</span>
x &lt;- <span class="pd_green1">'+'</span>(<span class="pd_blue">2</span>, <span class="pd_blue">3</span>) <span class="pd_maroon1"># add 2 and 3</span></pre>
</div>
<div class="heading">
<h3 class="h3" id="sec6_3">6.3 Loading Functions</h3>
<p class="noindent">Although <code>R</code> comes with lots of built-in functions, you can always use more functions! <strong>Packages</strong> (also broadly, if inaccurately, referred to as <em>libraries</em>) are additional sets of <code>R</code> functions that are written and published by the <code>R</code> community. Because many <code>R</code> users encounter the same data management and analysis challenges, programmers are able to use these packages and thereby <span epub:type="pagebreak" id="page_74"></span>benefit
 from the work of others. (This is the amazing thing about the open 
source community—people solve problems and then make those solutions 
available to others.) Popular <code>R</code> packages exist for manipulating data (<code>dplyr</code>), making beautiful graphics (<code>ggplot2</code>), and implementing machine learning algorithms (<code>randomForest</code>).</p>
</div>
<p class="noindent"><code>R</code> packages do not ship with the <code>R</code>
 software by default, but rather need to be downloaded (once) and then 
loaded into your interpreter’s environment (each time you wish to use 
them). While this may seem cumbersome, the <code>R</code> software would be huge and slow if you had to install and load <em>all</em> available packages to do anything with it.</p>
<p class="noindent">Luckily, it is possible to install and load <code>R</code> packages from within <code>R</code>. The base <code>R</code> software provides <code><strong>install.packages()</strong></code> function for installing packages, and the <code><strong>library()</strong></code> function for loading them. The following example illustrates installing and loading the <code>stringr</code> package (which contains handy functions for working with character strings):</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0074-01a" id="p0074-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Install the `stringr` package. Only needs to be done once per computer</span>
<span class="pd_blue"><strong>install.packages</strong></span>(<span class="pd_green1">"stringr"</span>)

<span class="pd_maroon1"># Load the package (make `stringr` functions available in this `R` session)</span>
<span class="pd_blue"><strong>library</strong></span>(<span class="pd_green1">"stringr"</span>) <span class="pd_maroon1"># quotes optional here, but best to include them</span></pre>
<div class="note-m">
<p class="title">Caution</p>
<p class="notepara">When you install a package, you may receive a warning message about the package being built under a previous version of <code>R</code>.
 In all likelihood, this shouldn’t cause a problem, but you should pay 
attention to the details of the messages and keep them in mind 
(especially if you start getting unexpected errors).</p>
<p class="notepara">Errors installing packages are some of the trickiest
 to solve, since they depend on machine-specific configuration details. 
Read any error messages carefully to determine what the problem may be.</p>
</div>
<p class="noindent">The <code>install.packages()</code> function downloads the necessary set of <code>R</code> code for a given package (which explains why you need to do it only once per machine), while the <code>library()</code> function loads those scripts into your current <code>R</code> session (you connect to the “library” where the package has been installed). If you’re curious <em>where</em> the library of packages is located on your computer, you can run the <code>R</code> function <code>.libPaths()</code> to see where the files are stored.</p>
<div class="note-m">
<p class="title">Caution</p>
<p class="notepara">Loading a package sometimes overrides a function of 
the same name that is already in your environment. This may cause a 
warning to appear in your <code>R</code> terminal, but it does not 
necessarily mean you made a mistake. Make sure to read warning messages 
carefully and attempt to decipher their meaning. If the warning doesn’t 
refer to something that seems to be a problem (such as overriding 
existing functions you weren’t going to use), you can ignore it and move
 on.</p>
</div>
<p class="noindent">After loading a package with the <code>library()</code> function, you have access to functions that were written as part of that package. For example, <code>stringr</code> provides a function <code><strong>str_count()</strong></code> that <span epub:type="pagebreak" id="page_75"></span>returns how many times a “substring” appears in a word (see the <code>stringr</code> documentation<a id="ch06fn3a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn3" class="totri-footnote"><sup>3</sup></a> for a complete list of functions included in that package):</p>
<p class="footnote"><a id="ch06fn3" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn3a" class="totri-footnote"><sup>3</sup></a><a href="https://cran.r-project.org/web/packages/stringr/stringr.pdf">https://cran.r-project.org/web/packages/stringr/stringr.pdf</a></p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0075-01a" id="p0075-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># How many i's are in Mississippi?</span>
<span class="pd_blue"><strong>str_count</strong></span>(<span class="pd_green1">"Mississippi"</span>, <span class="pd_green1">"i"</span>) <span class="pd_maroon1"># 4</span></pre>
<p class="noindent">Because there are so many packages, many of them 
will provide functions with the same names. You thus might need to 
distinguish between the <code>str_count()</code> function from <code>stringr</code> and the <code>str_count()</code> function from somewhere else. You can do this by using the full package name of the function (called <strong>namespacing</strong> the function)—written as the package name, followed by a double colon (<code><strong>::</strong></code>), followed by the name of the function:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0075-02a" id="p0075-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Explicitly call the namespaced `str_count` function. Not very common.</span>
stringr<span class="pd_red1"><strong>::</strong></span><span class="pd_blue"><strong>str_count</strong></span>(<span class="pd_green1">"Mississippi"</span>, <span class="pd_green1">"i"</span>) <span class="pd_maroon1"># 4</span>

<span class="pd_maroon1"># Equivalently, call the function without namespacing</span>
<span class="pd_blue"><strong>str_count</strong></span>(<span class="pd_green1">"Mississippi"</span>, <span class="pd_green1">"i"</span>) <span class="pd_maroon1"># 4</span></pre>
<p class="noindent">Much of the work involved in programming for data 
science involves finding, understanding, and using these external 
packages (no need to reinvent the wheel!). A number of such packages 
will be discussed and introduced in this text, but you must also be 
willing to extrapolate what you learn (and research further examples) to
 new situations.</p>
<div class="note-g">
<p class="title">Tip</p>
<p class="notepara">There are packages available to help you improve the style of your <code>R</code> code. The <code>lintr</code><a id="ch06sbfn1a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06sbfn1" class="totri-footnote"><sup>a</sup></a> package detects code that violates the tidyverse style guide, and the <code>styler</code><a id="ch06sbfn2a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06sbfn2" class="totri-footnote">b</a> package applies suggested formatting to your code. After loading those packages, you can run <code>lint("MY_FILENAME.R")</code> and <code>style_file("MY_FILENAME.R")</code> (using the appropriate filename) to help ensure you have used good code style.</p>
<p class="footnotesb"><a id="ch06sbfn1" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06sbfn1a" class="totri-footnote"><sup>a</sup></a> <a href="https://github.com/jimhester/lintr">https://github.com/jimhester/lintr</a></p>
<p class="footnotesb"><a id="ch06sbfn2" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06sbfn2a" class="totri-footnote"><sup>b</sup></a> <a href="http://styler.r-lib.org/">http://styler.r-lib.org</a></p>
</div>
<div class="heading">
<h3 class="h3" id="sec6_4">6.4 Writing Functions</h3>
<p class="noindent">Even more exciting than loading other people’s 
functions is writing your own. Anytime that you have a task that you may
 repeat throughout a script—or if you just want to organize your 
thinking—it’s good practice to write a function to perform that task. 
This will limit repetition and reduce the likelihood of errors, as well 
as make things easier to read and understand (and identify flaws in your
 analysis).</p>
</div>
<p class="noindent"><span epub:type="pagebreak" id="page_76"></span>The best way to understand the syntax for defining a function is to look at an example:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0076-01a" id="p0076-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># A function named `make_full_name` that takes two arguments
# and returns the "full name" made from them</span>
make_full_name &lt;- <span class="pd_blue"><strong>function</strong></span>(first_name, last_name) {
  <span class="pd_maroon1"># Function body: perform tasks in here</span>
  full_name &lt;- <span class="pd_blue"><strong>paste</strong></span>(first_name, last_name)

  <span class="pd_maroon1"># Functions will *return* the value of the last line</span>
  full_name
}

<span class="pd_maroon1"># Call the `make_full_name()` function with the values "Alice" and "Kim"</span>
my_name &lt;- <span class="pd_blue"><strong>make_full_name</strong></span>(<span class="pd_green1">"Alice"</span>, <span class="pd_green1">"Kim"</span>) <span class="pd_maroon1"># returns "Alice Kim" into `my_name`</span></pre>
<p class="noindent">Functions are in many ways like variables: they have a <strong>name</strong> to which you <em>assign</em> a value (using the same assignment operator: <code>&lt;-</code>). One difference is that they are written using the <code><strong>function</strong></code> keyword to indicate that you are creating a function and not simply storing a value. Per the tidyverse style guide,<a id="ch06fn4a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn4" class="totri-footnote"><sup>4</sup></a> functions should be written in <code>snake_case</code> and named using <strong>verbs</strong>—after all, they define something that the code will <em>do</em>. A function’s name should clearly suggest what it does (without becoming too long).</p>
<p class="footnote"><a id="ch06fn4" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn4a" class="totri-footnote"><sup>4</sup></a><strong>tidyverse style Guide</strong>: <a href="http://style.tidyverse.org/functions.html">http://style.tidyverse.org/functions.html</a></p>
<div class="note-y">
<p class="title">Remember</p>
<p class="notepara">Although tidyverse functions are written in <code>snake_case</code>, many built-in <code>R</code> functions use a dot <code>.</code> to separate words—for example, <code>install.packages()</code> and <code>is.numeric()</code> (which determines whether a value is a number and not, for example, a character string).</p>
</div>
<p class="noindent">A function includes several different parts:</p>
<ul>
<li><p class="bullet"><strong>Arguments</strong>: The value assigned to the function name uses the syntax <code>function(...)</code>
 to indicate that you are creating a function (as opposed to a number or
 character string). The words put between the parentheses are names for 
variables that will contain the values passed in as arguments. For 
example, when you call <code>make_full_name("Alice", "Kim")</code>, the value of the first argument (<code>"Alice"</code>) will be assigned to the first variable (<code>first_name</code>), and the value of the second argument (<code>"Kim"</code>) will be assigned to the second variable (<code>last_name</code>).</p>
<p class="noindent">Importantly, you can make the argument names anything you want (<code>name_first</code>, <code>given_name</code>,
 and so on), just as long as you then use that variable name to refer to
 the argument inside the function body. Moreover, these argument 
variables are available only while inside the function. You can think of
 them as being “nicknames” for the values. The variables <code>first_name</code>, <code>last_name</code>, and <code>full_name</code> exist only within this particular function; that is, they are accessible within the <strong>scope</strong> of the function.</p></li>
<li><p class="bullet"><strong>Body</strong>: The body of the function is a <em>block of code</em> that falls between curly braces <code><strong>{}</strong></code> (a “block” is represented by curly braces surrounding code statements). The cleanest style is to put the opening <code>{</code> immediately after the arguments list, and the closing <code>}</code> on its own line.</p>
<p class="noindent"><span epub:type="pagebreak" id="page_77"></span>The 
function body specifies all the instructions (lines of code) that your 
function will perform. A function can contain as many lines of code as 
you want. You will usually want more than 1 line to make the effort of 
creating the function worthwhile, but if you have more than 20 lines, 
you might want to break it up into separate functions. You can use the 
argument variables in here, create new variables, call other functions, 
and so on. Basically, any code that you would write outside of a 
function can be written inside of one as well!</p></li>
<li><p class="bullet"><strong>Return value</strong>: A function will 
return (output) whatever value is evaluated in the last statement (line)
 of that function. In the preceding example, the final <code>full_name</code> statement will be returned.</p>
<p class="noindent">It is also possible to explicitly state what value to return by using the <code><strong>return()</strong></code> function, passing it the value that you wish your function to return:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0077-01a" id="p0077-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># A function to calculate the area of a rectangle</span>
calculate_rect_area &lt;- <span class="pd_blue"><strong>function</strong></span>(width, height){
    <span class="pd_blue"><strong>return</strong></span>(width <span class="pd_red1"><strong>*</strong></span> height) <span class="pd_maroon1"># return a specific result</span>
}</pre>
<p class="noindent">However, it is considered good style to use the <code>return()</code> statement only when you wish to return a value before the final statement is executed (see <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#sec6_5">Section 6.5</a>). As such, you can place the value you wish to return as the last line of the function, and it will be returned:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0077-02a" id="p0077-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># A function to calculate the area of a rectangle</span>
calculate_rect_area &lt;- <span class="pd_blue"><strong>function</strong></span>(width, height){
&nbsp;&nbsp;&nbsp;&nbsp;<span class="pd_maroon1"># Store a value in a variable, then return that value</span>
&nbsp;&nbsp;&nbsp;&nbsp;area &lt;- width <span class="pd_red1"><strong>*</strong></span> height <span class="pd_maroon1"># calculate area</span>
&nbsp;&nbsp;&nbsp;&nbsp;area <span class="pd_maroon1"># return this value from the function</span>
}

<span class="pd_maroon1"># A function to calculate the area of a rectangle</span>
calculate_rect_area &lt;- <span class="pd_blue"><strong>function</strong></span>(width, height){
&nbsp;&nbsp;&nbsp;&nbsp;<span class="pd_maroon1"># Equivalently, return a value anonymously (without first storing it)</span>
&nbsp;&nbsp;&nbsp;&nbsp;width <span class="pd_red1"><strong>*</strong></span> height <span class="pd_maroon1"># return this value from the function</span>
}</pre></li>
</ul>
<p class="noindent">You can call (execute) a function you defined the same way you call built-in functions. When you do so, <code>R</code> will take the arguments you pass in (e.g., <code>"Alice"</code> and <code>"Kim"</code>)
 and assign them to the argument variables. It then executes each line 
of code in the function body one at a time. When it gets to the last 
line (or the <code>return()</code> call), it will end the function and 
return the last expression, which could be assigned to a different 
variable outside of the function.</p>
<p class="noindent">Overall, writing functions is an effective way to 
group lines of code together, creating an abstraction for those 
statements. Instead of needing to think about doing four or five steps 
at once, you can just think about a single step: calling the function! 
This makes it easier to understand your code and the analysis you need 
to perform.</p>
<div class="heading">
<h4 id="sec6_4_1"><span epub:type="pagebreak" id="page_78"></span>6.4.1 Debugging Functions</h4>
<p class="noindent">A central part of writing functions is fixing the 
(inevitable) errors that you introduce in the process. Identifying 
errors within the functions you write is more complex than resolving an 
issue with a single line of code because you will need to search across 
the entire function to find the source of the error! The best technique 
for honing in on and identifying the line of code with the error is to 
run each line of code <em>one at a time</em>. While it is possible to execute each line individually in RStudio (using <code>cmd+enter</code>), this process requires further work when functions require <em>arguments</em>.</p>
</div>
<p class="noindent">For example, consider a function that calculates a person’s body mass index (BMI):</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0078-01a" id="p0078-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Calculate body mass index (kg/m^2) given the input in pounds (lbs) and
# inches (inches)</span>
calculate_bmi &lt;- <span class="pd_blue"><strong>function</strong></span>(lbs, inches) {
  height_in_meters &lt;- inches <span class="pd_red1"><strong>*</strong></span> <span class="pd_blue">0.0254</span>
  weight_in_kg &lt;- lbs <span class="pd_red1"><strong>*</strong></span> <span class="pd_blue">0.453592</span>
  bmi &lt;- weight_in_kg <span class="pd_red1"><strong>/</strong></span> height_in_meters <span class="pd_red1"><strong>^</strong></span> <span class="pd_blue">2</span>
  bmi
}

<span class="pd_maroon1"># Calculate the BMI of a person who is 180 pounds and 70 inches tall</span>
<span class="pd_blue"><strong>calculate_bmi</strong></span>(<span class="pd_blue">180</span>, <span class="pd_blue">70</span>)</pre>
<p class="noindent">Recall that when you execute a function, <code>R</code>
 evaluates each line of code, replacing the arguments of that function 
with the values you supply. When you execute the function (e.g., by 
calling <code>calculate_bmi(180, 70)</code>), you are essentially <em>replacing</em> the variable <code>lbs</code> with the value <code>180</code>, and replacing the variable <code>inches</code> with the value <code>70</code> throughout the function.</p>
<p class="noindent">But if you try to run each statement in the function one at a time, then the variables <code>lbs</code> and <code>inches</code>
 won’t have values (because you never actually called the function)! 
Thus a strategy for debugging functions is to assign sample values to 
your arguments, and then run through the function line by line. For 
example, you could do the following (either within the function, in 
another part of the script, or just in the console):</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0078-02a" id="p0078-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Set sample values for the `lbs` and `inches` variables</span>
lbs &lt;- <span class="pd_blue">180</span>
inches &lt;- <span class="pd_blue">70</span></pre>
<p class="noindent">With those variables assigned, you can run each 
statement inside the function one at a time, checking the intermediate 
results to see where your code makes a mistake—and then you can fix that
 line and retest the function! Be sure to delete the temporary variables
 when you’re done.</p>
<p class="noindent">Note that while this will identify <em>syntax errors</em>, it will not help you identify <em>logical</em>
 errors. For example, this strategy will not help if you use the 
incorrect conversion between inches and meters, or pass the arguments to
 your function in the incorrect order. For example, <code>calculate_bmi(70, 180)</code> won’t return an error, but it will return a <em>very</em> different BMI than <code>calculate_bmi(180, 70)</code>.</p>
<div class="note-y">
<p class="title">Remember</p>
<p class="notepara">When you pass arguments to functions, <em>order matters!</em> Be sure that you are passing in values in the order expected by the function.</p>
</div>
<div class="heading">
<h3 class="h3" id="sec6_5"><span epub:type="pagebreak" id="page_79"></span>6.5 Using Conditional Statements</h3>
<p class="noindent">Functions are a way to organize and control the flow
 of execution of your code (e.g., which lines of code get run in which 
order). In <code>R</code>, as in other languages, you can also control 
program flow by specifying different instructions that can be run based 
on a different set of conditions. <strong>Conditional statements</strong> allow you to specify different blocks of code to run when given different contexts, which is often valuable within functions.</p>
</div>
<p class="noindent">In an abstract sense, a conditional statement is saying:</p>
<pre class="prea">IF something is true
  do some lines of code
OTHERWISE
  do some other lines of code</pre>
<p class="noindent">In <code>R</code>, you write these conditional statements using the keywords <code><strong>if</strong></code> and <code><strong>else</strong></code> and the following syntax:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0079-01a" id="p0079-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># A generic conditional statement</span>
<span class="pd_blue"><strong>if</strong></span> (condition) {
  <span class="pd_maroon1"># lines of code to run if `condition` is TRUE</span>
} <span class="pd_blue"><strong>else</strong></span> {
  <span class="pd_maroon1"># lines of code to run if `condition` is FALSE</span>
}</pre>
<p class="noindent">Note that the <code>else</code> needs to be on the same line as the closing curly brace (<code>}</code>) of the <code>if</code> block. It is also possible to omit the <code>else</code> and its block, in case you don’t want to do anything when the condition isn’t met.</p>
<p class="noindent">The <code>condition</code> can be any variable or expression that resolves to a logical value (<code>TRUE</code> or <code>FALSE</code>). Thus both of the following conditional statements are valid:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0079-02a" id="p0079-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Evaluate conditional statements based on the temperature of porridge</span>

<span class="pd_maroon1"># Set an initial temperature value for the porridge</span>
porridge_temp &lt;- <span class="pd_blue">125</span> <span class="pd_maroon1"># in degrees F</span>

<span class="pd_maroon1"># If the porridge temperature exceeds a given threshold, enter the code block</span>
<span class="pd_blue"><strong>if</strong></span> (porridge_temp <span class="pd_red1"><strong>&gt;</strong></span> <span class="pd_blue">120</span>) { <span class="pd_maroon1"># expression is true</span>
  <span class="pd_blue"><strong>print</strong></span>(<span class="pd_green1">"This porridge is too hot!"</span>) <span class="pd_maroon1"># will be executed</span>
}

<span class="pd_maroon1"># Alternatively, you can store a condition (as a TRUE/FALSE value)
# in a variable</span>
too_cold &lt;- porridge_temp <span class="pd_red1"><strong>&lt;</strong></span> <span class="pd_blue">70</span> <span class="pd_maroon1"># a logical value</span>

<span class="pd_maroon1"># If the condition `too_cold` is TRUE, enter the code block</span>
<span class="pd_blue"><strong>if</strong></span> (too_cold) { <span class="pd_maroon1"># expression is false</span>
  <span class="pd_blue"><strong>print</strong></span>(<span class="pd_green1">"This porridge is too cold!"</span>) <span class="pd_maroon1"># will not be executed</span>
}</pre>
<p class="noindent"><span epub:type="pagebreak" id="page_80"></span>You can further extend the set of conditions evaluated using an <code>else if</code> statement (e.g., an <code>if</code> immediately after an <code>else</code>). For example:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0080-01a" id="p0080-01">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Function to determine if you should eat porridge</span>
test_food_temp &lt;- <span class="pd_blue"><strong>function</strong></span>(temp) {
  <span class="pd_blue"><strong>if</strong></span> (temp <span class="pd_red1"><strong>&gt;</strong></span> <span class="pd_blue">120</span>) {
    status &lt;- <span class="pd_green1">"This porridge is too hot!"</span>
  } <span class="pd_blue"><strong>else if</strong></span> (temp <span class="pd_red1"><strong>&lt;</strong></span> <span class="pd_blue">70</span>) {
    status &lt;- <span class="pd_green1">"This porridge is too cold!"</span>
  } <span class="pd_blue"><strong>else</strong></span> {
    status &lt;- <span class="pd_green1">"This porridge is just right!"</span>
  }
  status <span class="pd_maroon1"># return the status</span>
}

<span class="pd_maroon1"># Use the function on different temperatures</span>
<span class="pd_blue"><strong>test_food_temp</strong></span>(<span class="pd_blue">150</span>) <span class="pd_maroon1"># "This porridge is too hot!"</span>
<span class="pd_blue"><strong>test_food_temp</strong></span>(<span class="pd_blue">60</span>)  <span class="pd_maroon1"># "This porridge is too cold!"</span>
<span class="pd_blue"><strong>test_food_temp</strong></span>(<span class="pd_blue">119</span>) <span class="pd_maroon1"># "This porridge is just right!"</span></pre>
<p class="noindent">Note that a set of conditional statements causes the code to <em>branch</em>—that
 is, only one block of the code will be executed. As such, you may want 
to have one block return a specific value from a function, while the 
other block might keep going (or return something else). This is when 
you would want to use the <code>return()</code> function:</p>
<p class="codelink"><a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06_images.xhtml#p0080-02a" id="p0080-02">Click here to view code image</a></p>
<pre class="pre"><span class="pd_maroon1"># Function to add a title to someone's name</span>
add_title &lt;- <span class="pd_blue"><strong>function</strong></span>(full_name, title) {
  <span class="pd_maroon1"># If the name begins with the title, just return the name</span>
  <span class="pd_blue"><strong>if</strong></span> (<span class="pd_blue"><strong>startsWith</strong></span>(full_name, title)) { 
    <span class="pd_blue"><strong>return</strong></span>(full_name) <span class="pd_maroon1"># no need to prepend the title</span>
  }

  name_with_title &lt;- <span class="pd_blue"><strong>paste</strong></span>(title, full_name) <span class="pd_maroon1"># prepend the title</span>
  name_with_title <span class="pd_maroon1"># last argument gets returned</span>
}</pre>
<p class="noindent">Note that this example didn’t use an explicit <code>else</code> clause, but rather just let the function “keep going” when the <code>if</code> condition wasn’t met. While both approaches would be valid (achieve the same desired result), it’s better code design to avoid <code>`else`</code> statements when possible and to instead view the <code>if</code> conditional as just handling a “special case.”</p>
<p class="noindent">Overall, conditionals and functions are ways to <em>organize</em> the flow of code in your program: to explicitly tell the <code>R</code>
 interpreter in which order lines of code should be executed. These 
structures become particularly useful as programs get large, or when you
 need to combine code from multiple script files. For practice using and
 writing functions, see the set of accompanying book exercises.<a id="ch06fn5a" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn5" class="totri-footnote"><sup>5</sup></a></p>
<p class="footnote"><a id="ch06fn5" href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch06.xhtml#ch06fn5a" class="totri-footnote"><sup>5</sup></a><strong>Function exercises:</strong> <a href="https://github.com/programming-for-data-science/chapter-06-exercises">https://github.com/programming-for-data-science/chapter-06-exercises</a></p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-6" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders">
		
		<li class="copy"><a href="#">Copy</a></li>
		
		<li class="add-highlight"><a href="#">Add Highlight</a></li>
		<li class="add-note"><a href="#">
			Add Note
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch05.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">5 Introduction to R</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://learning.oreilly.com/library/view/programming-skills-for/9780135159071/ch07.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">7 Vectors</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    



        
      </div>
      




  <footer class="pagefoot">
    <a href="#" class="icon-up" style="display: none;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      <li class="full-support"><a href="https://www.oreilly.com/online-learning/support/">Support</a></li>
      <li><a href="https://www.oreilly.com/online-learning/apps.html">Get the App</a></li>
      
        <li><a href="https://learning.oreilly.com/accounts/logout/">Sign Out</a></li>
      
    </ul>
    <span class="copyright">© 2019 <a href="https://learning.oreilly.com/" target="_blank">Safari</a>.</span>
    <a href="https://learning.oreilly.com/terms/">Terms of Service</a> /
    <a href="https://learning.oreilly.com/membership-agreement/">Membership Agreement</a> /
    <a href="https://www.oreilly.com/privacy.html">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","applicationID":"3275661,67267027,67267028","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","beacon":"bam.nr-data.net","queueTime":8,"applicationTime":444,"agent":""}</script>


    
    <script src="Chapter6_files/a_002" charset="utf-8"></script>
    <script src="Chapter6_files/a" charset="utf-8"></script>
  

<div class="annotator-notice"></div><div class="font-flyout" style="top: 200.567px; left: 943px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div></body></html>